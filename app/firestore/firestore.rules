service cloud.firestore {
  match /databases/{database}/documents {
    match /habitatUse/{habitatUseId} {
      allow read;
      allow create: if habitatUseValidation();
    }
  }
}

function habitatUseValidation() {
  return validateIntegerValue('encSeqNo', request.resource.data.encSeqNo, 0, 99) &&
    validateIntegerValue('numberOfAnimals', request.resource.data.numberOfAnimals, 0, 99) &&
    validateIntegerValue('numberOfCalves', request.resource.data.numberOfCalves, 0, 99) &&
    validateIntegerValue('numberOfBoats', request.resource.data.numberOfBoats, 0, 999) &&
    validateIntegerValue('surfaceBout', request.resource.data.surfaceBout, 0, 99) &&
    validateFloatValue('waterDepth', request.resource.data.waterDepth, 0, 9999) &&
    validateFloatValue('distance', request.resource.data.distance, 0, 9999) &&
    validateFloatValue('bearing', request.resource.data.bearing, 0, 360) &&
    validateFloatValue('aspect', request.resource.data.aspect, 0, 360) &&
    validateFloatValue('waterTemp', request.resource.data.waterTemp, 15, 40) &&
    validateStringValue('groupComposition', request.resource.data.groupComposition, 100) && 
    validateStringValue('species', request.resource.data.species, 100) && 
    validateStringValue('directionOfTravel', request.resource.data.directionOfTravel, 100) &&
    validateStringValue('bottomSubstrate', request.resource.data.bottomSubstrate, 100) &&
    validateStringValue('cloudCover', request.resource.data.cloudCover, 100) &&
    validateStringValue('beaufortSeaState', request.resource.data.beaufortSeaState, 100) &&
    validateStringValue('tideState', request.resource.data.tideState, 100) &&
    validateStringValue('behaviour', request.resource.data.behaviour, 100) &&
    validateStringValue('swellWaveHeight', request.resource.data.swellWaveHeight, 100) &&
    validateStringValue('groupCohesion', request.resource.data.groupCohesion, 100) &&
    validateComments() &&
    validatePosition('latitude', request.resource.data.latitude, -90, 90) &&
    validatePosition('longitude', request.resource.data.longitude, -180, 180) &&
    validateDateValue('date', request.resource.data.date) &&
    validateTimeValue('startTime', request.resource.data.startTime) &&
    validateTimeValue('endTime', request.resource.data.endTime);
}

function validateMissingField(field) {
  return field in request.resource.data;
}

function validateNumber(val) {
  return val is number;
}

function validateInteger(val) {
  return val is int;
}

function validateString(val) {
  return val is string;
}

function validateEmptyString(val) {
  return val.size() != 0;
}

function validateRange(val, min, max) {
  return val >= min && val <= max;
}

function validatePositionFormat(val) {
  return string(val).matches('^-?[0-9]*.[0-9]{6}$');
}

function validateDateFormat(val) {
  return string(val).matches('^[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}$');
}

function validateTimeFormat(val) {
  return string(val).matches('^[0-9]{1,2}:[0-9]{1,2}$');
}

function validateMaxCharLength(val, max) {
  return val.size() <= max;
}

function validateFloatValue(field, val, min, max) {
  return validateMissingField(field) && validateNumber(val) && validateRange(val, min, max);
}

function validateIntegerValue(field, val, min, max) {
  return validateMissingField(field) && validateInteger(val) && validateRange(val, min, max);
}

function validatePosition(field, val, min, max) {
  return validateFloatValue(field, float(val), min, max) && validatePositionFormat(val);
}

function validateStringValue(field, val, max) {
  return validateMissingField(field) && validateString(val) && validateEmptyString(val) && validateMaxCharLength(val, max);
}

function validateDateValue(field, val) {
  return validateMissingField(field) && validateDateFormat(val);
}

function validateTimeValue(field, val) {
  return validateMissingField(field) && validateTimeFormat(val);
}

function validateComments() {
  return validateMissingField('comments') && validateString(request.resource.data.comments) && validateMaxCharLength(request.resource.data.comments, 500);
}