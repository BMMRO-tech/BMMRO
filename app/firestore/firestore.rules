service cloud.firestore {
  match /databases/{database}/documents {
    match /habitatUse/{habitatUseId} {
      allow read;
      allow create: if habitatUseValidation(request.resource.data);
    }
  }
}

function habitatUseValidation(fireData) {
  return validateIntegerValue('encSeqNo', fireData.encSeqNo, 0, 99) &&
    validateIntegerValue('numberOfAnimals', fireData.numberOfAnimals, 0, 99) &&
    validateIntegerValue('numberOfCalves', fireData.numberOfCalves, 0, 99) &&
    validateIntegerValue('numberOfBoats', fireData.numberOfBoats, 0, 999) &&
    validateIntegerValue('surfaceBout', fireData.surfaceBout, 0, 99) &&
    validateFloatValue('waterDepth', fireData.waterDepth, 0, 9999) &&
    validateFloatValue('distance', fireData.distance, 0, 9999) &&
    validateFloatValue('bearing', fireData.bearing, 0, 360) &&
    validateFloatValue('aspect', fireData.aspect, 0, 360) &&
    validateFloatValue('waterTemp', fireData.waterTemp, 15, 40) &&
    validateStringValue('groupComposition', fireData.groupComposition, 100) &&
    validateStringValue('species', fireData.species, 100) &&
    validateStringValue('directionOfTravel', fireData.directionOfTravel, 100) &&
    validateStringValue('bottomSubstrate', fireData.bottomSubstrate, 100) &&
    validateStringValue('cloudCover', fireData.cloudCover, 100) &&
    validateStringValue('beaufortSeaState', fireData.beaufortSeaState, 100) &&
    validateStringValue('tideState', fireData.tideState, 100) &&
    validateStringValue('behaviour', fireData.behaviour, 100) &&
    validateStringValue('swellWaveHeight', fireData.swellWaveHeight, 100) &&
    validateStringValue('groupCohesion', fireData.groupCohesion, 100) &&
    validateCommentsValue() &&
    validatePosition('latitude', fireData.latitude, -90, 90) &&
    validatePosition('longitude', fireData.longitude, -180, 180) &&
    validateDateValue('date', fireData.date) &&
    validateTimeValue('startTime', fireData.startTime) &&
    validateTimeValue('endTime', fireData.endTime) &&
  validateTimestampValue('timestamp', fireData.timestamp);
}

function validateMissingField(field) {
  return field in request.resource.data;
}

function validateNumber(val) {
  return val is number;
}

function validateInteger(val) {
  return val is int;
}

function validateString(val) {
  return val is string;
}

function validateTimestamp(val) {
  return val is timestamp;
}

function validateEmptyString(val) {
  return val.size() != 0;
}

function validateRange(val, min, max) {
  return val >= min && val <= max;
}

function validatePositionFormat(val) {
  return string(val).matches('^-?[0-9]*.[0-9]{6}$');
}

function validateDateFormat(val) {
  return string(val).matches('^[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}$');
}

function validateTimeFormat(val) {
  return string(val).matches('^[0-9]{1,2}:[0-9]{1,2}$');
}

function validateMaxCharLength(val, max) {
  return val.size() <= max;
}

function validateFloatValue(field, val, min, max) {
  return validateMissingField(field) && validateNumber(val) && validateRange(val, min, max);
}

function validateIntegerValue(field, val, min, max) {
  return validateMissingField(field) && validateInteger(val) && validateRange(val, min, max);
}

function validatePosition(field, val, min, max) {
  return validateFloatValue(field, float(val), min, max) && validatePositionFormat(val);
}

function validateStringValue(field, val, max) {
  return validateMissingField(field) && validateString(val) && validateEmptyString(val) && validateMaxCharLength(val, max);
}

function validateDateValue(field, val) {
  return validateMissingField(field) && validateDateFormat(val);
}

function validateTimeValue(field, val) {
  return validateMissingField(field) && validateTimeFormat(val);
}

function validateCommentsValue() {
  return validateMissingField('comments') && validateString(request.resource.data.comments) && validateMaxCharLength(request.resource.data.comments, 500);
}

function validateTimestampValue(field, val){
  return validateMissingField(field) && validateTimestamp(val);
}