service cloud.firestore {
  match /databases/{database}/documents {
    match /habitatUse/{habitatUseId} {
      function validateMissing(property) {
        return property in request.resource.data;
      }

      function validateNumber(val) {
        return val is number;
      }

      function validateString(val) {
        return val is string;
      }

      function validateEmptyString(val) {
        return val.size() != 0;
      }

      function validateRange(val, min, max) {
        return val >= min && val <= max;
      }

      function validateDecimalPrecision(val) {
        return string(val).matches('^-?[0-9]*.[0-9]{6}$');
      }

      function validateMaxCharLength(val, max) {
        return val.size() <= max;
      }

      function validateNumericValue(property, val, min, max) {
        return validateMissing(property) && validateNumber(val) && validateRange(val, min, max);
      }

      function validatePosition(property, val, min, max) {
        return validateNumericValue(property, val, min, max) && validateDecimalPrecision(val);
      }

      function validateStringValue(property, val, max) {
        return validateMissing(property) && validateString(val) && validateMaxCharLength(val, max);
      }

      allow read;
      allow create: if 
        validateNumericValue('encSeqNo', request.resource.data.encSeqNo, 0, 99) &&
        validateNumericValue('numberOfAnimals', request.resource.data.numberOfAnimals, 0, 99) &&
        validateNumericValue('numberOfCalves', request.resource.data.numberOfCalves, 0, 99) &&
        validateNumericValue('numberOfBoats', request.resource.data.numberOfBoats, 0, 999) &&
        validateNumericValue('waterDepth', request.resource.data.waterDepth, 0, 9999) &&
        validateNumericValue('distance', request.resource.data.distance, 0, 9999) &&
        validateNumericValue('bearing', request.resource.data.bearing, 0, 360) &&
        validateNumericValue('aspect', request.resource.data.aspect, 0, 360) &&
        validateNumericValue('waterTemp', request.resource.data.waterTemp, 15, 40) &&
        validateNumericValue('surfaceBout', request.resource.data.surfaceBout, 0, 99) &&
        validatePosition('latitude', request.resource.data.latitude, -90, 90) &&
        validatePosition('longitude', request.resource.data.longitude, -180, 180) &&
        validateStringValue('groupComposition', request.resource.data.groupComposition, 100) && 
        validateEmptyString(request.resource.data.groupComposition) &&
        validateStringValue('comments', request.resource.data.comments, 500);
    }
  }
}